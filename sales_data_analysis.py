# -*- coding: utf-8 -*-
"""Sales Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kFWRaNN-E_mCbZuDVdbaw2el-f29TIyK
"""

import pandas as pd
import numpy as np
import matplotlib.pylab as plt
import seaborn as sns
from datetime import datetime

data = pd.read_excel("/ECOMM DATA.xlsx")

data.info()

data.shape

data.head()

# Lets drop the less relevent columns from data
data_1 = data.drop(columns = ["Row ID","Customer Name","Postal Code","Product ID"])

data_1.head()

#EDA : Explorarty data analysis to check the missing vaue, varience, duplicates and also outliers if we need
# We can do it sepratly or we can use "sweetviz" librar for this as below
!pip install sweetviz

import sweetviz
myreport = sweetviz.analyze(data_1)
myreport.show_html("Report_html")

data_1.isna().sum()

# Product with heighest number of sales
high_sales = data_1.groupby('Product Name').agg({'Quantity':'sum'}).sort_values('Quantity', ascending=False)[:10]
high_sales

# Visulizing above finding
sns.barplot(x = 'Product Name', y = 'Quantity', data = high_sales.reset_index(), palette = 'muted')
plt.xticks(rotation = 'vertical')
plt.show

data_1.info()

# Top 10 products with heighest sales
high_sales_prd = pd.DataFrame(data_1.groupby('Product Name')['Sales'].sum())
high_sales_prd.sort_values(by = ['Sales'], inplace=True, ascending = False)
high_sales_prd.head(10)

Profitable_prd = pd.DataFrame(data_1.groupby(['Product Name'])['Profit'].sum())
  Profitable_prd.sort_values(by =['Profit'], inplace = True, ascending = False)
  Profitable_prd.head(10)

"""##Total Sales"""

Total_sales = sum(data_1['Sales'])
Total_sales

"""##Best Selling Product

"""

sns.barplot(x = 'Product Name', y = 'Profit', data = Profitable_prd.head(10),palette = 'muted')
plt.xticks(rotation = 'vertical')

# Categories with higest sales
Profitable_category = pd.DataFrame(data_1.groupby(['Category'])['Sales'].sum())
Profitable_category.sort_values(by = 'Sales', inplace=True, ascending = False)
Profitable_category

sns.barplot(x = 'Category', y = 'Sales', data = Profitable_category)

data_1.groupby(['Category', 'Sub-Category'], as_index = False)['Quantity'].count()

# Profiable customer segment
Profitable_Segment = pd.DataFrame(data_1.groupby(['Segment'])['Profit'].sum())
Profitable_Segment.sort_values(by ='Profit', inplace = True, ascending = False)
Profitable_Segment

sns.barplot(x = 'Segment', y = 'Profit', data = Profitable_Segment.reset_index())
plt.xticks = 'vertical'

data_1.info()

# Total sales ales trends over time
#add moth column

month = data_1['Order Date'].astype('str')
month = month.apply(lambda x:datetime.strptime(x, '%Y-%m-%d'))
data_1['Month'] = month.map(lambda x : x.month)

data_1['year'] = data_1['Order Date'].dt.year
data_1.info()

data_1['Month'] = data_1['Month'].astype('int64')
data_1['year'] = data_1['year'].astype('int64')
data_1.info()

# Profiable customer segment

Profitable_year = pd.DataFrame(data_1.groupby(['year'])['Profit'].sum())
Profitable_year.sort_values(by = 'Profit', inplace = True, ascending = False)
Profitable_year

#Profitable_Segment = pd.DataFrame(data_1.groupby(['Segment'])['Profit'].sum())
#Profitable_Segment.sort_values(by ='Profit', inplace = True, ascending = False)
#Profitable_Segment

"""## Sales Trend Over Time"""

sns.barplot(x = 'year', y = 'Profit', data = Profitable_year.reset_index(), palette = 'muted')

Profiatable_Month = pd.DataFrame(data_1.groupby(['Month'])['Profit'].sum())
Profiatable_Month.sort_values(by = 'Profit', inplace = True, ascending = False)
Profiatable_Month

sns.barplot(x = 'Month', y = 'Profit', data = Profiatable_Month.reset_index(), palette = 'muted')

"""# Conclusion

#### Total Sales is : 12616046

#### Sales trends over time : We can see that in sales are high in year 2015 and in month of November

#### The best-selling products is "Canon imageCLASS 2200 Advanced Copier"
"""

